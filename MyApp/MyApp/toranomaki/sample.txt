1. 取得した文言をクライアントに送るロジック作成
[HttpGet]
public ActionResult Index()
{
    return View();
}

public ActionResult


1. 取得した文言を画面に送るロジック
// GET: Portfolio
[HttpGet]
public ActionResult Index(string userId)
{
    // useridの空白とNullのチェック
	if (string.IsNullOrEmpty(userId))
    {
        return RedirectToAction("GetPageList");
    }

    var text = textData.GetText(userId);

    return View(new IndexViewModel(text.Title, text.Description, text.Profile_1));
}

2.編集モード作成
public ActionResult SaveChange(SaveChangeRequest request)
{
    textData.RegistText(new RegisterTextRequest(userId, request.Title, request.Description, request.Profile_1));
    return Redirect("Preview");
}

<div class="row">
    @using (Html.BeginForm("SaveChange", "Admin", FormMethod.Post))
    {
        <div class="form-group col-md-11 col-md-offset-1">
            <label for="inputTitle">Title</label>
            @Html.TextBox(
                "Title",
                Model.Title,
                new { @class="form-control", @id="inputTitle" })
        </div>
        <div class="form-group col-md-11 col-md-offset-1">
            <label for="inputDescription">Description</label>
            @Html.TextArea(
                "Description",
                Model.Description,
                new { @class="form-control", @id= "inputDescription", @style="height:150px;"})
        </div>
        <div class="form-group col-md-11 col-md-offset-1">
            <label for="inputProfile_1">Profile_1</label>
            @Html.TextArea(
                "Profile_1",
                Model.Profile_1,
                new { @class="form-control", @id= "inputProfile_1", @style="height:150px;" })
        </div>
        <button type="submit" class="btn btn-primary col-md-offset-4">Save</button>
    }
</div>


4.1 Userテーブル
CREATE TABLE [dbo].[User] (
    [Id]          NCHAR (32)  NOT NULL,
    [LoginId]     NCHAR (50)  NOT NULL,
    [Name]        NCHAR (50)  NOT NULL,
    [MailAddress] NCHAR (256) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

4.2 Textテーブル
CREATE TABLE [dbo].[Text] (
    [Id]          NCHAR (32)  NOT NULL,
    [UserId]      NCHAR (32)  NOT NULL,
    [Title]       NCHAR (50)  NOT NULL,
    [Description] NCHAR (200) NOT NULL,
    [Profile_1]   NCHAR (200) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

4.DB接続情報
データソース：Microsoft SQL Sever (SqlClient)
サーバー名：(localdb)\ProjectsV13

5.
public GetTextResponse GetText(string userId)
{
    // 渡されたuerIdをもとにTextテーブル内を検索する
    var res = db.Text.FirstOrDefault(x => x.UserId == userId);

    // 検索結果がNullなら空レスポンス
    if (res == null)
    {
        return new GetTextResponse();
    }

    // 検索結果が存在すれば取得したデータを返す
    return new GetTextResponse(res.Title, res.Description, res.Profile_1);
}